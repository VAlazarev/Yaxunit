#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты.ДобавитьТестовыйНабор("Тестирование документов ""Приход,Расход""").ВТранзакции()
	.ДобавитьТест("СозданиеДокументов", "", "Позитив");  
	
КонецПроцедуры

Процедура СозданиеДокументов() Экспорт
	
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	Товар = ЮТест.Данные().КонструкторОбъекта("Справочник.Товары")
	.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля
	.Установить("Наименование", "Тестовый товар")
	.Установить("Код", "Т0001")
	.Записать();
	
	Склад = ЮТест.Данные().КонструкторОбъекта("Справочник.Склады")
	.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля
	.Установить("Наименование", "Тестовый склад")
	.Установить("Код", "Т0001")
	.Записать();
	
	СписокПоступлений=Новый СписокЗначений;
	СписокРеализаций =Новый СписокЗначений;
	
	// 2. Формируем Документы 
	СоздатьПоступление(Склад,Товар,СписокПоступлений);
	СоздатьПоступление(Склад,Товар,СписокПоступлений); 
	СоздатьПоступление(Склад,Товар,СписокПоступлений);
	
	СоздатьРеализацию(Склад,Товар,СписокРеализаций); 
	СоздатьРеализацию(Склад,Товар,СписокРеализаций);
	СоздатьРеализацию(Склад,Товар,СписокРеализаций); 
	
	// 3. Проверяем 
	
	//Проверить, что каждый документ успешно создан
	ПроверитьПроведенияДокумента(СписокПоступлений,"ДокументСсылка.ПриходТовара");
	ПроверитьПроведенияДокумента(СписокРеализаций,"ДокументСсылка.РасходТовара");
	
	//Проверить, что каждый документ успешно проведен и содержит движения
	ПроверитьДвиженияДокумента(СписокПоступлений);
	ПроверитьДвиженияДокумента(СписокПоступлений);
	
	// Проверяем остатки
	ПроверитьОстатки(Склад,Товар); 
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции  

Процедура СоздатьПоступление(Склад,Номенклатура,СписокДокументов)
	
	СозданыйДокумент= ЮТест.Данные().КонструкторОбъекта("Документ.ПриходТовара")
	.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля 
	.Установить("Дата",ТекущаяДата()-2)
	.Установить("Склад",Склад)
	.ТабличнаяЧасть("Товары")
	.ДобавитьСтроку()               
	.Установить("Товар", Номенклатура)
	.Фикция("Цена")  
	.Установить("Количество",1)              
	.Фикция("Сумма")
	.Провести(Ложь);  
	
	СписокДокументов.Добавить(СозданыйДокумент)	
	
	
КонецПроцедуры   

Процедура СоздатьРеализацию(Склад,Номенклатура,СписокДокументов)
	
	СозданыйДокумент= ЮТест.Данные().КонструкторОбъекта("Документ.РасходТовара")
	.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля  
	.Установить("Дата",ТекущаяДата()-1)
	.Установить("Склад",Склад)
	.ТабличнаяЧасть("Товары")
	.ДобавитьСтроку()               
	.Установить("Товар", Номенклатура)
	.Фикция("Цена")  
	.Установить("Количество",1)      
	.Фикция("Сумма")
	.Провести(Ложь); 
	
	СписокДокументов.Добавить(СозданыйДокумент);
	
КонецПроцедуры  

Процедура ПроверитьДвиженияДокумента(СписокДокументов)
	
	Для Каждого СтрокаСписка Из СписокДокументов Цикл
		Движения = ЮТЗапросы.ДвиженияДокумента(СтрокаСписка.Значение, "ТоварныеЗапасы");
		
		ЮТест.ОжидаетЧто(Движения)
		.Заполнено();
		
	КонецЦикла
	
КонецПроцедуры   

Процедура ПроверитьПроведенияДокумента(СписокДокументов,ТипДокумента)
	Для Каждого СтрокаСписка Из СписокДокументов Цикл
		
		ЮТест.ОжидаетЧто(СтрокаСписка.Значение)
		.Заполнено()
		.ИмеетТип(ТипДокумента)
		.Свойство("Проведен").ЭтоИстина();
		
	КонецЦикла
	
КонецПроцедуры   


Процедура ПроверитьОстатки(Склад,Товар) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварныеЗапасыОстатки.Товар КАК Товар,
	|	ТоварныеЗапасыОстатки.Склад КАК Склад,
	|	ТоварныеЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварныеЗапасы.Остатки(
	|			&Дата,
	|			Склад = &Склад
	|				И Товар = &Товар) КАК ТоварныеЗапасыОстатки";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Товар", Товар);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	ЮТест.ОжидаетЧто(ВыборкаДетальныеЗаписи)
	.ИмеетДлину(0)
	
КонецПроцедуры



#КонецОбласти