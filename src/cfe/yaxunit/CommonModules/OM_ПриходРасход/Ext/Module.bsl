#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты.ДобавитьТестовыйНабор("Тестирование документов ""Приход,Расход""").ВТранзакции()
		.ДобавитьТест("СозданиеДокументов", "", "Позитив");  
	
КонецПроцедуры

Процедура СозданиеДокументов() Экспорт
	
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	Товар = ЮТест.Данные().КонструкторОбъекта("Справочник.Товары")
		.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля
		.Установить("Наименование", "Тестовый товар")
		.Установить("Код", "Т0001")
		.Записать();
	
	Склад = ЮТест.Данные().КонструкторОбъекта("Справочник.Склады")
		.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля
		.Установить("Наименование", "Тестовый склад")
		.Установить("Код", "Т0001")                          
		.Записать(); 
	
	Валюта = ЮТест.Данные().КонструкторОбъекта("Справочник.Валюты")
		.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля
		.Установить("Наименование", "Тестовая Валюта")                                 
		.Установить("Код", "Т0001")
		.Записать();  
	
	Контрагент = ЮТест.Данные().КонструкторОбъекта("Справочник.Контрагенты")
		.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля
		.Установить("Наименование", "Тестовый Контрагент")
		.Установить("Код", "Т0001")
		.Записать(); 
		
	СтруктураПараметров= Новый Структура;
	Структурапараметров.Вставить("Товар",Товар);
	Структурапараметров.Вставить("Склад",Склад);
	Структурапараметров.Вставить("Валюта",Валюта); 
	Структурапараметров.Вставить("Контрагент",Контрагент);
	
	
	
	СписокПоступлений=Новый СписокЗначений;
	СписокРеализаций =Новый СписокЗначений;
	
	// 2. Формируем Документы 
	СоздатьПоступление(СтруктураПараметров,СписокПоступлений);
	СоздатьПоступление(СтруктураПараметров,СписокПоступлений); 
	СоздатьПоступление(СтруктураПараметров,СписокПоступлений);
	
	СоздатьРеализацию(СтруктураПараметров,СписокРеализаций); 
	СоздатьРеализацию(СтруктураПараметров,СписокРеализаций);
	СоздатьРеализацию(СтруктураПараметров,СписокРеализаций); 
	
	// 3. Проверяем 
	
	//Проверить, что каждый документ успешно создан
	ПроверитьПроведенияДокумента(СписокПоступлений,"ДокументСсылка.ПриходТовара");
	ПроверитьПроведенияДокумента(СписокРеализаций,"ДокументСсылка.РасходТовара");
	
	//Проверить, что каждый документ успешно проведен и содержит движения
	ПроверитьДвиженияДокумента(СписокПоступлений);
	ПроверитьДвиженияДокумента(СписокПоступлений);
	
	// Проверяем остатки
	ПроверитьОстаткиТоварныеЗапасы(СтруктураПараметров); 
	ПроверитьОстаткиВзаиморасчеты(СтруктураПараметров); 
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции  

Процедура СоздатьПоступление(СтруктураПараметров,СписокДокументов)
	
	СозданыйДокумент= ЮТест.Данные().КонструкторОбъекта("Документ.ПриходТовара")
		.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля 
		.Установить("Дата",ТекущаяДата()-2)
		.Установить("Склад",СтруктураПараметров.Склад) 
		.Установить("Валюта",СтруктураПараметров.Валюта)
		.Установить("Валюта",СтруктураПараметров.Контрагент)
		
		.ТабличнаяЧасть("Товары")                          
		.ДобавитьСтроку()                                                          
		.Установить("Товар", СтруктураПараметров.Товар)
		.Фикция("Цена")  
		.Установить("Количество",1)              
		.Фикция("Сумма")
		.Провести(Ложь);  
	
	СписокДокументов.Добавить(СозданыйДокумент)	
	
	
КонецПроцедуры   

Процедура СоздатьРеализацию(СтруктураПараметров,СписокДокументов)
	
	СозданыйДокумент= ЮТест.Данные().КонструкторОбъекта("Документ.РасходТовара")
		.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля  
		.Установить("Дата",ТекущаяДата()-1)
		.Установить("Склад",СтруктураПараметров.Склад) 
		.Установить("Валюта",СтруктураПараметров.Валюта)
		.Установить("Валюта",СтруктураПараметров.Контрагент)
		.ТабличнаяЧасть("Товары")
		.ДобавитьСтроку()               
		.Установить("Товар", СтруктураПараметров.Товар)
		.Фикция("Цена")  
		.Установить("Количество",1)      
		.Фикция("Сумма")
		.Провести(Ложь); 
		
	СписокДокументов.Добавить(СозданыйДокумент);
	
КонецПроцедуры  

Процедура ПроверитьДвиженияДокумента(СписокДокументов)
	
	Для Каждого СтрокаСписка Из СписокДокументов Цикл
		Движения = ЮТЗапросы.ДвиженияДокумента(СтрокаСписка.Значение, "ТоварныеЗапасы");
		
		ЮТест.ОжидаетЧто(Движения)
			.Заполнено();
		
	КонецЦикла
	
КонецПроцедуры   

Процедура ПроверитьПроведенияДокумента(СписокДокументов,ТипДокумента)
	Для Каждого СтрокаСписка Из СписокДокументов Цикл
		
		ЮТест.ОжидаетЧто(СтрокаСписка.Значение)
			.Заполнено()
			.ИмеетТип(ТипДокумента)
			.Свойство("Проведен").ЭтоИстина();
		
	КонецЦикла
	
КонецПроцедуры   


Процедура ПроверитьОстаткиТоварныеЗапасы(СтруктураПараметров) 
	
	ОписаниеЗапроса = ЮТЗапросы.ОписаниеЗапроса();
	ОписаниеЗапроса.ИмяТаблицы = "РегистрНакопления.ТоварныеЗапасы.Остатки";
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("Склад");
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("Товар");
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("КоличествоОстаток");
	ОписаниеЗапроса.Условия.Добавить("Склад = &Склад");
	ОписаниеЗапроса.Условия.Добавить("Товар = &Товар");
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Склад", СтруктураПараметров.Склад);
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Товар", СтруктураПараметров.Товар);
	
	РезультатЗапроса = ЮТЗапросы.РезультатЗапроса(ОписаниеЗапроса);
	
	ЮТест.ОжидаетЧто(РезультатЗапроса)
		.ИмеетДлину(0)
	
КонецПроцедуры

Процедура ПроверитьОстаткиВзаиморасчеты(СтруктураПараметров) 
	
	ОписаниеЗапроса = ЮТЗапросы.ОписаниеЗапроса();
	ОписаниеЗапроса.ИмяТаблицы = "РегистрНакопления.Взаиморасчеты.Остатки";
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("Валюта");
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("Контрагент");
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("СуммаОстаток");
	ОписаниеЗапроса.Условия.Добавить("Валюта = &Валюта");
	ОписаниеЗапроса.Условия.Добавить("Контрагент = &Контрагент");
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Валюта", СтруктураПараметров.Валюта);
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Контрагент", СтруктураПараметров.Контрагент);
	
	РезультатЗапроса = ЮТЗапросы.РезультатЗапроса(ОписаниеЗапроса);
	
	ЮТест.ОжидаетЧто(РезультатЗапроса)
		.ИмеетДлину(0)  
	
КонецПроцедуры



#КонецОбласти